<?php

namespace App\Http\Controllers;

use Illuminate\Http\Request;
use App\Model\Task;
use App\Model\Names;
use App\Model\WeeklyTasks;
use Carbon\Carbon;

use DB;



class TasksController extends Controller
{
    

    public function AddTasks(Request $request){
        $tasks = new Task();
        $validator = \Validator::make($request->all(), [
            'sTasks'=>'required',
            'NoOfStudents'=>'required',
            'Center'=>'required',
            'Difficulty'=>'required'
        ]);
        if ($validator->fails()) {
            return response()->json(["status"=>"error"]);
        }
        return response()->json($tasks->Saving_Tasks($request));
    }

    public function getAllTaskings(){
        $array = [];
        $tasks = new Task();
        $taskingLists = $tasks->getAllTasks();
        for($i = 0; $i < count(array($taskingLists)[0]); $i++){
            array_push($array,array($taskingLists)[0][$i]);
        }
        return $array;
    }

    public function getAllNames(){
        $array = [];
        $names = new Names();
        $nameLists = $names->fetch_batch();
        for($i = 0; $i < count(array($nameLists)[0]); $i++){
            array_push($array,array($nameLists)[0][$i]);
        }
        return $array;
    }

    public function getAllWeeklyTask(){
        $array = [];
        $wTasks = new WeeklyTasks();
        $wLists = $wTasks->fetch_taskings();
        for($i = 0; $i < count(array($wLists)[0]); $i++){
            array_push($array,array($wLists)[0][$i]);
        }
        return $array;
    }



    public function AutogenerateTasks(){
        $taskingList = $this->getAllTaskings();
        $nameLists = $this->getAllNames();
        $studentsLeft = array();
        $date = Carbon::now()->toDateTimeString();
        for($i = 0; $i<count($nameLists); $i++){
            array_push($studentsLeft, $nameLists[$i]->id);
        }
        for($x = 0; $x<count($taskingList); $x++){
            $coordinator = array_rand($studentsLeft);
            if (($key = array_search($coordinator, $studentsLeft)) !== false) {
                unset($studentsLeft[$key]);
            }
            for($y = 0; $y<$taskingList[$x]->NoOfStudents; $y++){
                $member = array_rand($studentsLeft);
                $this->saveAutoGenerated($x, $member, $coordinator, 73, $date);
                if (($key = array_search($member, $studentsLeft)) !== false) {
                    unset($studentsLeft[$key]);
                }
            }
            
        }
        $studentsLeft = array();
        return $this->getAllWeeklyTask();
    }

    public function saveAutoGenerated($TasksID, $NameID, $Coordinator, $MakerID, $Date){
        DB::beginTransaction();
        try{
            $newWeekTask = WeeklyTasks::create([
                'TasksID' => $TasksID,
                'NameID' => $NameID,
                'Coordinator' => $Coordinator,
                'MakerID' => 73,
                'Date' => $Date,
            ]);
            $newWeekTask->save();
            DB::commit();
        } catch(Exception $e){
            DB::rollback();
        }
    }

}
